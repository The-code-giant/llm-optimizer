name: Rollback Backend Deployment

on:
  workflow_dispatch:
    inputs:
      revision:
        description: 'Task definition revision to rollback to (leave empty for previous revision)'
        required: false
        type: string

env:
  AWS_REGION: us-west-2
  ECS_CLUSTER: ai-seo-cluster
  ECS_SERVICE: ai-seo-backend-service
  ECS_TASK_DEFINITION: ai-seo-backend-task

jobs:
  rollback:
    name: Rollback Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Determine rollback revision
      id: rollback-revision
      run: |
        if [ -n "${{ github.event.inputs.revision }}" ]; then
          ROLLBACK_REVISION="${{ github.event.inputs.revision }}"
          echo "Using specified revision: $ROLLBACK_REVISION"
        else
          # Get the previous revision (second most recent)
          CURRENT_REVISION=$(aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --query 'services[0].taskDefinition' \
            --output text | grep -o '[0-9]*$')
          
          ROLLBACK_REVISION=$((CURRENT_REVISION - 1))
          echo "Current revision: $CURRENT_REVISION"
          echo "Rolling back to revision: $ROLLBACK_REVISION"
        fi
        
        ROLLBACK_TASK_DEF="$ECS_TASK_DEFINITION:$ROLLBACK_REVISION"
        echo "rollback-task-def=$ROLLBACK_TASK_DEF" >> $GITHUB_OUTPUT
        
    - name: Verify rollback target exists
      env:
        ROLLBACK_TASK_DEF: ${{ steps.rollback-revision.outputs.rollback-task-def }}
      run: |
        echo "Verifying rollback target exists..."
        aws ecs describe-task-definition \
          --task-definition $ROLLBACK_TASK_DEF \
          --query 'taskDefinition.family' \
          --output text
        echo "✅ Rollback target verified"
        
    - name: Rollback deployment
      env:
        ROLLBACK_TASK_DEF: ${{ steps.rollback-revision.outputs.rollback-task-def }}
      run: |
        echo "Rolling back to: $ROLLBACK_TASK_DEF"
        
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --task-definition $ROLLBACK_TASK_DEF
          
    - name: Wait for rollback to complete
      run: |
        echo "Waiting for rollback to stabilize..."
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --cli-read-timeout 900 \
          --cli-connect-timeout 60
          
    - name: Verify rollback
      run: |
        echo "Verifying rollback..."
        SERVICE_STATUS=$(aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query 'services[0].deployments[0].status' \
          --output text)
        
        CURRENT_TASK_DEF=$(aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query 'services[0].taskDefinition' \
          --output text)
        
        if [ "$SERVICE_STATUS" = "PRIMARY" ]; then
          echo "✅ Rollback successful!"
          echo "Current task definition: $CURRENT_TASK_DEF"
          
          RUNNING_COUNT=$(aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --query 'services[0].runningCount' \
            --output text)
          
          echo "Running tasks: $RUNNING_COUNT"
        else
          echo "❌ Rollback failed with status: $SERVICE_STATUS"
          exit 1
        fi 