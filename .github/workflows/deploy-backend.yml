name: Deploy Backend to AWS ECS

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ai-seo-backend
  ECS_CLUSTER: ai-seo-cluster
  ECS_SERVICE: ai-seo-backend-service
  ECS_TASK_DEFINITION: ai-seo-backend-task
  CONTAINER_NAME: backend

jobs:
  deploy:
    name: Deploy Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Building Docker image..."
        cd backend
        docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
    - name: Check if task definition exists
      id: check-task-def
      run: |
        if aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --region ${{ env.AWS_REGION }} &>/dev/null; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    - name: Download or create task definition
      if: steps.check-task-def.outputs.exists == 'true'
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json
    - name: Create new task definition if not exists
      if: steps.check-task-def.outputs.exists == 'false'
      run: |
        echo '{"family": "${{ env.ECS_TASK_DEFINITION }}", "networkMode": "awsvpc", "requiresCompatibilities": ["FARGATE"], "cpu": "512", "memory": "1024", "executionRoleArn": "arn:aws:iam::456859042895:role/ecsTaskExecutionRole", "containerDefinitions": [{"name": "${{ env.CONTAINER_NAME }}", "image": "456859042895.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest", "essential": true, "portMappings": [{"containerPort": 3001, "protocol": "tcp"}], "logConfiguration": {"logDriver": "awslogs", "options": {"awslogs-group": "/ecs/ai-seo-backend", "awslogs-create-group": "true", "awslogs-region": "${{ env.AWS_REGION }}", "awslogs-stream-prefix": "backend"}}}]}' > task-definition.json
        aws ecs register-task-definition --cli-input-json file://task-definition.json --region ${{ env.AWS_REGION }}
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        
    - name: Verify deployment
      run: |
        echo "Verifying deployment..."
        SERVICE_STATUS=$(aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query 'services[0].deployments[0].status' \
          --output text)
        
        if [ "$SERVICE_STATUS" = "PRIMARY" ]; then
          echo "✅ Deployment successful!"
          
          # Get running task count
          RUNNING_COUNT=$(aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --query 'services[0].runningCount' \
            --output text)
          
          echo "Running tasks: $RUNNING_COUNT"
        else
          echo "❌ Deployment failed with status: $SERVICE_STATUS"
          exit 1
        fi 