name: Deploy Backend to AWS ECS

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ai-seo-backend
  ECS_CLUSTER: ai-seo-cluster
  ECS_SERVICE: ai-seo-backend-service
  ECS_TASK_DEFINITION: deployment-backend

jobs:
  deploy:
    name: Deploy Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Building Docker image..."
        cd backend
        docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
    - name: Update ECS task definition and deploy
      env:
        IMAGE_URI: ${{ steps.build-image.outputs.image }}
      run: |
        echo "Updating ECS task definition..."
        
        # Get current task definition (clean format)
        TASK_DEF=$(aws ecs describe-task-definition \
          --task-definition $ECS_TASK_DEFINITION \
          --query 'taskDefinition' | \
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)')

        # Debug: print the task definition
        echo "Fetched task definition:"
        echo "$TASK_DEF"

        # Check if TASK_DEF is empty or contains an error
        if [ -z "$TASK_DEF" ] || [[ "$TASK_DEF" == *"Unable to describe task definition"* ]]; then
          echo "❌ Task definition not found or invalid. Please create it in the AWS Console first."
          exit 1
        fi
        
        # Update image URI in task definition
        UPDATED_TASK_DEF=$(echo $TASK_DEF | jq \
          --arg IMAGE_URI "$IMAGE_URI" \
          '.containerDefinitions[0].image = $IMAGE_URI')
        
        # Register new task definition
        echo "Registering new task definition..."
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json "$UPDATED_TASK_DEF" \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        echo "New task definition ARN: $NEW_TASK_DEF_ARN"
        
        # Update service with new task definition
        echo "Updating ECS service..."
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --task-definition $NEW_TASK_DEF_ARN
          
    - name: Wait for deployment to complete
      run: |
        echo "Waiting for deployment to stabilize..."
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --cli-read-timeout 900 \
          --cli-connect-timeout 60
          
    - name: Verify deployment
      run: |
        echo "Verifying deployment..."
        SERVICE_STATUS=$(aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query 'services[0].deployments[0].status' \
          --output text)
        
        if [ "$SERVICE_STATUS" = "PRIMARY" ]; then
          echo "✅ Deployment successful!"
          
          # Get running task count
          RUNNING_COUNT=$(aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --query 'services[0].runningCount' \
            --output text)
          
          echo "Running tasks: $RUNNING_COUNT"
        else
          echo "❌ Deployment failed with status: $SERVICE_STATUS"
          exit 1
        fi 