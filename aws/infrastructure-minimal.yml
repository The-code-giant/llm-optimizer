AWSTemplateFormatVersion: '2010-09-09'
Description: 'AI SEO Optimizer Backend - Minimal Cost Deployment (No ALB)'

Parameters:
  Environment:
    Type: String
    Default: minimal
    Description: Environment name
  
  DatabaseUrl:
    Type: String
    NoEcho: true
    Description: PostgreSQL connection string
  
  JwtSecret:
    Type: String
    NoEcho: true
    Description: JWT secret key
  
  ClerkSecretKey:
    Type: String
    NoEcho: true
    Description: Clerk secret key
  
  OpenAIApiKey:
    Type: String
    NoEcho: true
    Description: OpenAI API key
    Default: ""
  
  AnthropicApiKey:
    Type: String
    NoEcho: true
    Description: Anthropic API key
    Default: ""
  
  CorsOrigin:
    Type: String
    Default: "*"
    Description: CORS origin (use * for development)

  ImageUri:
    Type: String
    Description: ECR image URI for the backend

Resources:
  # Minimal VPC Setup
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-subnet"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Minimal Security Group - allows all traffic (for simplicity)
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks - minimal setup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3001
          ToPort: 3001
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-sg"

  # Secrets Manager
  DatabaseUrlSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "ai-seo/database-url"
      SecretString: !Ref DatabaseUrl

  JwtSecretSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "ai-seo/jwt-secret"
      SecretString: !Ref JwtSecret

  ClerkSecretSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "ai-seo/clerk-secret"
      SecretString: !Ref ClerkSecretKey

  OpenAISecretSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "ai-seo/openai-key"
      SecretString: !Ref OpenAIApiKey

  AnthropicSecretSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "ai-seo/anthropic-key"
      SecretString: !Ref AnthropicApiKey

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "ai-seo-optimizer-${Environment}"

  # CloudWatch Log Group with minimal retention
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/ai-seo-optimizer-${Environment}"
      RetentionInDays: 3

  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref DatabaseUrlSecret
                  - !Ref JwtSecretSecret
                  - !Ref ClerkSecretSecret
                  - !Ref OpenAISecretSecret
                  - !Ref AnthropicSecretSecret

  # ECS Task Role
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole

  # ECS Task Definition - Minimal Resources
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "ai-seo-optimizer-${Environment}"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: redis
          Image: redis:7-alpine
          Essential: true
          PortMappings:
            - ContainerPort: 6379
          Command:
            - redis-server
            - --appendonly
            - "no"
            - --maxmemory
            - 64mb
            - --maxmemory-policy
            - allkeys-lru
          Memory: 128
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: redis
        - Name: backend
          Image: !Ref ImageUri
          Essential: true
          PortMappings:
            - ContainerPort: 3001
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: PORT
              Value: "3001"
            - Name: REDIS_HOST
              Value: localhost
            - Name: REDIS_PORT
              Value: "6379"
            - Name: REDIS_URL
              Value: redis://localhost:6379
            - Name: CORS_ORIGIN
              Value: !Ref CorsOrigin
          Secrets:
            - Name: DATABASE_URL
              ValueFrom: !Ref DatabaseUrlSecret
            - Name: JWT_SECRET
              ValueFrom: !Ref JwtSecretSecret
            - Name: CLERK_SECRET_KEY
              ValueFrom: !Ref ClerkSecretSecret
            - Name: OPENAI_API_KEY
              ValueFrom: !Ref OpenAISecretSecret
            - Name: ANTHROPIC_API_KEY
              ValueFrom: !Ref AnthropicSecretSecret
          Memory: 384
          DependsOn:
            - ContainerName: redis
              Condition: START
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: backend

  # ECS Service - No Load Balancer, Direct Public IP
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub "ai-seo-optimizer-${Environment}"
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      TaskDefinition: !Ref ECSTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PublicSubnet
          AssignPublicIp: ENABLED

Outputs:
  ClusterName:
    Description: Name of the ECS Cluster
    Value: !Ref ECSCluster

  ServiceName:
    Description: Name of the ECS Service
    Value: !Ref ECSService

  Instructions:
    Description: How to get the public IP
    Value: "Check ECS Console > Cluster > Service > Tasks to get the public IP. Access via http://PUBLIC_IP:3001"

  SecurityGroup:
    Description: Security Group ID
    Value: !Ref ECSSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroup" 